pred <- factor( ifelse(predicted_values[,2] > threshold, 1, 0) )
levels(test$gen_election)[2]
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
install.packages("e1071")
library(e1071
library(caret)
library(e1071)
library(caret)
predicted_values <- predict(rf, test,type= "prob")
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold, 1, 0) )
levels(test$gen_election)[2]
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
library(e1071)
library(caret)
predicted_values <- predict(rf, test,type= "prob")
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold, 1, 0) )
levels(test$gen_election)[2]
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
library(e1071)
library(caret)
predicted_values <- predict(rf, test,type= "prob")
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold) )
library(e1071)
library(caret)
predicted_values <- predict(rf, test,type= "prob")
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold, 1, 0) )
levels(test$gen_election)[2]
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
View(train)
View(test)
str(pred)
str(test$gen_election)
str(test$gen_election)
levels(test$gen_election) <- list("W" = "1", "L" = "0")
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
str(test$gen_election)
levels(pred) <- list("W" = "1", "L" = "0")
str(pred)
levels(pred) <- list("W" = "1", "L" = "0")
str(pred)
library(e1071)
library(caret)
predicted_values <- predict(rf, test,type= "prob")
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold, 1, 0) )
levels(test$gen_election)[2]
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
str(pred)
str(test$gen_election)
levels(pred) <- list("0" = "1", "1" = "2")
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
levels(pred) <- list("0" = "1", "1" = "2")
levels(test$gen_election) <- list("L" = "1", "W" = "2")
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
library(e1071)
library(caret)
predicted_values <- predict(rf, test,type= "prob")
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold, 1, 0) )
levels(test$gen_election)[2]
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
str(pred)
str(test$gen_election)
str(pred)
levels(test$gen_election) <- list("0" = "L", "1" = "W")
levels(test$gen_election) <- list("0" = "L", "1" = "W")
str(pred)
str(test$gen_election)
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
levels(test$gen_election) <- list("0" = "W", "1" = "L")
str(pred)
str(test$gen_election)
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
levels(test$gen_election) <- list("0" = "L", "1" = "W")
str(pred)
str(test$gen_election)
levels(test$gen_election) <- list("0" = "W", "1" = "L")
str(pred)
str(test$gen_election)
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
levels(test$gen_election) <- list("0" = "L", "1" = "W")
str(pred)
str(test$gen_election)
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
## 70% of the sample size
smp_size <- floor(0.70 * nrow(data))
## set the seed to make our partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(data)), size = smp_size)
train <- data[train_ind, ]
test <- data[-train_ind, ]
rf10<-randomForest(formula=gen_election~., data=train, ntree=10, importance=T, proximity=T, na.action=na.exclude)
print(rf10)
rf20<-randomForest(formula=gen_election~., data=train, ntree=20, importance=T, proximity=T, na.action=na.exclude)
print(rf20)
rf30<-randomForest(formula=gen_election~., data=train, ntree=30, importance=T, proximity=T, na.action=na.exclude)
print(rf30)
rf40<-randomForest(formula=gen_election~., data=train, ntree=40, importance=T, proximity=T, na.action=na.exclude)
print(rf40)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
bestmtry <- tuneRF(train[-26], train$gen_election, stepFactor=1.5, improve=0.01, ntreeTry=50, trace=T, plot=T)
print(bestmtry)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
library(e1071)
library(caret)
predicted_values <- predict(rf, test,type= "prob")
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold, 1, 0) )
levels(test$gen_election)[2]
levels(test$gen_election) <- list("0" = "L", "1" = "W")
str(pred)
str(test$gen_election)
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
install.packages("ROCR")
install.packages("ROCR")
install.packages("ggplot2")
library(tidyr)
library(dplyr)
library(randomForest)
library(caret)
library(ROCR)
library(ggplot2)
predicted_values_roc_rf <- predict(rf, test,type = "prob")[,2]
pred_roc_rf <- prediction(predicted_values_roc_rf, test$gen_election)
perf_rf <- performance(pred_roc_rf, measure = "tpr", x.measure = "fpr")
auc <- performance(pred_roc_rf, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf_rf@x.values),                       tpr=unlist(perf_rf@y.values),                       model="RF")ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +  geom_ribbon(alpha=0.2) +  geom_line(aes(y=tpr)) +  ggtitle(paste0("ROC Curve w/ AUC=", auc))
library(ROCR)
library(ggplot2)
predicted_values_roc_rf <- predict(rf, test,type = "prob")[,2]
pred_roc_rf <- prediction(predicted_values_roc_rf, test$gen_election)
perf_rf <- performance(pred_roc_rf, measure = "tpr", x.measure = "fpr")
auc <- performance(pred_roc_rf, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf_rf@x.values),                       tpr=unlist(perf_rf@y.values), model="RF")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +  geom_ribbon(alpha=0.2) +  geom_line(aes(y=tpr)) +  ggtitle(paste0("ROC Curve w/ AUC=", auc))
varImpPlot(rf)
importance(rf)
ann <- nnet(gen_election~ ., data=train, size=5, maxit=1000)
install.packages("nnet")
library(tidyr)
library(dplyr)
library(randomForest)
library(caret)
library(nnet)
ann <- nnet(gen_election~ ., data=train, size=5, maxit=1000)
summary(ann)
library(nnet)
ann <- nnet(gen_election~ ., data=train, size=5, maxit=1000)
library(nnet)
ann <- nnet(gen_election~ ., data=train, size=5, maxit=1000)
summary(ann_1)
library(nnet)
ann <- nnet(gen_election~ ., data=train, size=5, maxit=1000)
summary(ann)
predicted_values_Ann <- predict(ann, test,type= "raw")
threshold <- 0.5
pred_ann <- factor( ifelse(predicted_values_Ann[,1] > threshold, "W", "L") )
pred_ann
levels(test$gen_election)[1]
levels(test$gen_election)[2]
test$gen_election
confusionMatrix(pred_ann, test$gen_election,  positive = levels(test$gen_election)[2])
predicted_values_ann <- predict(ann, test,type= "prob")
predicted_values_ann <- predict(ann, test,type= "raw")
threshold <- 0.5
pred1 <- factor( ifelse(predicted_values_ann[,2] > threshold, 1, 0) )
predicted_values_ann <- predict(ann, test,type= "raw")
head(predicted_values)
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,1] > threshold, 1, 0) ) # We ask R to use the threshold and convert the probabilities to class labels (zero and one)
head(pred) # Let's look at the predicted class labels
levels(test_data$salary.class)[2]
levels(test$gen_election)[2]
predicted_values_ann <- predict(ann, test,type= "raw")
head(predicted_values_ann)
pred_ann <- relevel(pred_ann, 1)
confusionMatrix(pred_ann, test$gen_election,
positive = levels(test$gen_election)[2]) # Creates the confusion matrix. It is important to determine positive in this function. The option positive sets the 1s as class positive.
predicted_values_ann <- predict(ann, test,type= "raw")
head(predicted_values_ann)
threshold <- 0.5
pred_ann <- factor( ifelse(predicted_values_ann[,1] > threshold, 1, 0) ) # We ask R to use the threshold and convert the probabilities to class labels (zero and one)
head(pred_ann) # Let's look at the predicted class labels
levels(test$gen_election)[2]
pred_ann <- relevel(pred_ann, 1)
confusionMatrix(pred_ann, test$gen_election,
positive = levels(test$gen_election)[2]) # Creates the confusion matrix. It is important to determine positive in this function. The option positive sets the 1s as class positive.
predicted_values_roc_ann <- predict(ann, test,type = "prob")[,2]
predicted_values_ANN <- predict(ann, test,type= "raw")
pred_ANN <- prediction(predicted_values_ANN, test$gen_election)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
predicted_values_ANN <- predict(ann, test,type= "raw")
pred_ANN <- prediction(predicted_values_ANN, test$gen_election)
perf <- performance(pred_ANN, measure = "tpr", x.measure = "fpr")
auc <- performance(pred_ANN, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="ANN")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
ann_2 <- nnet(gen_election ~ ., data=train_data, size=25, maxit=1000)
ann_2 <- nnet(gen_election ~ ., data=train, size=25, maxit=1000)
ann_2 <- nnet(gen_election ~ ., data=train, size=24, maxit=1000)
predicted_values_ANN3 <- predict(ann_3, test,type= "raw")
ann_3 <- nnet(gen_election ~ ., data=train, size=24, maxit=1000)
predicted_values_ANN3 <- predict(ann_3, test,type= "raw")
pred_ANN3 <- prediction(predicted_values_ANN3, test$gen_election)
perf <- performance(pred_ANN3, measure = "tpr", x.measure = "fpr")
auc <- performance(pred_ANN3, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="ANN")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
library(tidyr)
library(dplyr)
library(randomForest)
library(caret)
data <- read.csv("election_campaign_data.csv", sep=",", header=T, strip.white = T, na.strings = c("NA","NaN","","?"))
data <- data %>%
select (-c(cand_id, last_name, first_name, twitterbirth, facebookdate, facebookjan, youtubebirth))
#5.	Convert the following variables into factor variables using function as.factor(): “twitter”, “facebook”, “youtube”, “cand_ici”, and “gen_election”.
data$twitter<-as.factor(data$twitter)
data$facebook<-as.factor(data$facebook)
data$youtube<-as.factor(data$youtube)
data$cand_ici<-as.factor(data$cand_ici)
data$gen_election<-as.factor(data$gen_election)
#7.	Remove all of the observations with any missing values.
data <- data %>%
drop_na()
## 70% of the sample size
smp_size <- floor(0.70 * nrow(data))
## set the seed to make our partition reproducible
set.seed(123)
train_ind <- sample(seq_len(nrow(data)), size = smp_size)
train <- data[train_ind, ]
test <- data[-train_ind, ]
rf10<-randomForest(formula=gen_election~., data=train, ntree=10, importance=T, proximity=T, na.action=na.exclude)
print(rf10)
rf20<-randomForest(formula=gen_election~., data=train, ntree=20, importance=T, proximity=T, na.action=na.exclude)
print(rf20)
rf20<-randomForest(formula=gen_election~., data=train, ntree=20, importance=T, proximity=T, na.action=na.exclude)
print(rf20)
rf20<-randomForest(formula=gen_election~., data=train, ntree=20, importance=T, proximity=T, na.action=na.exclude)
print(rf20)
rf20<-randomForest(formula=gen_election~., data=train, ntree=20, importance=T, proximity=T, na.action=na.exclude)
print(rf20)
rf30<-randomForest(formula=gen_election~., data=train, ntree=30, importance=T, proximity=T, na.action=na.exclude)
print(rf30)
rf40<-randomForest(formula=gen_election~., data=train, ntree=40, importance=T, proximity=T, na.action=na.exclude)
print(rf40)
rf40<-randomForest(formula=gen_election~., data=train, ntree=40, importance=T, proximity=T, na.action=na.exclude)
print(rf40)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
rf50<-randomForest(formula=gen_election~., data=train, ntree=50, importance=T, proximity=T, na.action=na.exclude)
print(rf50)
bestmtry <- tuneRF(train[-26], train$gen_election, stepFactor=1.5, improve=0.01, ntreeTry=50, trace=T, plot=T)
print(bestmtry)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
rf <-randomForest(gen_election~., data=train, mtry=5, importance=TRUE, ntree=50)
print(rf)
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
library(e1071)
library(caret)
predicted_values <- predict(rf, test,type= "prob")
threshold <- 0.5
pred <- factor( ifelse(predicted_values[,2] > threshold, 1, 0) )
levels(test$gen_election)[2]
levels(test$gen_election) <- list("0" = "L", "1" = "W")
str(pred)
str(test$gen_election)
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
confusionMatrix(pred, test$gen_election,
positive = levels(test$gen_election)[2])
library(ROCR)
library(ggplot2)
predicted_values_roc_rf <- predict(rf, test,type = "prob")[,2]
pred_roc_rf <- prediction(predicted_values_roc_rf, test$gen_election)
perf_rf <- performance(pred_roc_rf, measure = "tpr", x.measure = "fpr")
auc <- performance(pred_roc_rf, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf_rf@x.values),                       tpr=unlist(perf_rf@y.values), model="RF")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +  geom_ribbon(alpha=0.2) +  geom_line(aes(y=tpr)) +  ggtitle(paste0("ROC Curve w/ AUC=", auc))
varImpPlot(rf)
importance(rf)
![an image caption Source: Ultimate Funny Dog Videos Compilation 2013.](images/week3/silly-dog.png)
C:/Users/Ibragim/Desktop/Capture1.png
C://Users/Ibragim/Desktop/Capture1.png
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(nnet)
ann <- nnet(gen_election~ ., data=train, size=5, maxit=1000)
summary(ann)
predicted_values_ann <- predict(ann, test,type= "raw")
head(predicted_values_ann)
threshold <- 0.5
pred_ann <- factor( ifelse(predicted_values_ann[,1] > threshold, 1, 0) ) # We ask R to use the threshold and convert the probabilities to class labels (zero and one)
head(pred_ann) # Let's look at the predicted class labels
levels(test$gen_election)[2]
pred_ann <- relevel(pred_ann, 1)
confusionMatrix(pred_ann, test$gen_election,
positive = levels(test$gen_election)[2]) # Creates the confusion matrix. It is important to determine positive in this function. The option positive sets the 1s as class positive.
pred_ann <- relevel(pred_ann, 1)
confusionMatrix(pred_ann, test$gen_election,
positive = levels(test$gen_election)[2]) # Creates the confusion matrix. It is important to determine positive in this function. The option positive sets the 1s as class positive.
predicted_values_ANN <- predict(ann, test,type= "raw")
pred_ANN <- prediction(predicted_values_ANN, test$gen_election)
perf <- performance(pred_ANN, measure = "tpr", x.measure = "fpr")
auc <- performance(pred_ANN, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="ANN")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
library(nnet)
ann <- nnet(gen_election~ ., data=train, size=5, maxit=1000)
summary(ann)
predicted_values_ann <- predict(ann, test,type= "raw")
head(predicted_values_ann)
threshold <- 0.5
pred_ann <- factor( ifelse(predicted_values_ann[,1] > threshold, 1, 0) ) # We ask R to use the threshold and convert the probabilities to class labels (zero and one)
head(pred_ann) # Let's look at the predicted class labels
levels(test$gen_election)[2]
pred_ann <- relevel(pred_ann, 1)
confusionMatrix(pred_ann, test$gen_election,
positive = levels(test$gen_election)[2]) # Creates the confusion matrix. It is important to determine positive in this function. The option positive sets the 1s as class positive.
pred_ann <- relevel(pred_ann, 1)
confusionMatrix(pred_ann, test$gen_election,
positive = levels(test$gen_election)[2]) # Creates the confusion matrix. It is important to determine positive in this function. The option positive sets the 1s as class positive.
pred_ann <- relevel(pred_ann, 1)
confusionMatrix(pred_ann, test$gen_election,
positive = levels(test$gen_election)[2]) # Creates the confusion matrix. It is important to determine positive in this function. The option positive sets the 1s as class positive.
library(nnet)
ann <- nnet(gen_election~ ., data=train, size=5, maxit=1000)
summary(ann)
predicted_values_ann <- predict(ann, test,type= "raw")
head(predicted_values_ann)
threshold <- 0.5
pred_ann <- factor( ifelse(predicted_values_ann[,1] > threshold, 1, 0) ) # We ask R to use the threshold and convert the probabilities to class labels (zero and one)
head(pred_ann) # Let's look at the predicted class labels
levels(test$gen_election)[2]
pred_ann <- relevel(pred_ann, 1)
confusionMatrix(pred_ann, test$gen_election,
positive = levels(test$gen_election)[2]) # Creates the confusion matrix. It is important to determine positive in this function. The option positive sets the 1s as class positive.
library(nnet)
ann <- nnet(gen_election~ ., data=train, size=5, maxit=1000)
summary(ann)
predicted_values_ann <- predict(ann, test,type= "raw")
head(predicted_values_ann)
threshold <- 0.5
pred_ann <- factor( ifelse(predicted_values_ann[,1] > threshold, 1, 0) ) # We ask R to use the threshold and convert the probabilities to class labels (zero and one)
head(pred_ann) # Let's look at the predicted class labels
levels(test$gen_election)[2]
pred_ann <- relevel(pred_ann, 1)
confusionMatrix(pred_ann, test$gen_election,
positive = levels(test$gen_election)[2]) # Creates the confusion matrix. It is important to determine positive in this function. The option positive sets the 1s as class positive.
predicted_values_ANN <- predict(ann, test,type= "raw")
pred_ANN <- prediction(predicted_values_ANN, test$gen_election)
perf <- performance(pred_ANN, measure = "tpr", x.measure = "fpr")
auc <- performance(pred_ANN, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="ANN")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
ann_2 <- nnet(gen_election ~ ., data=train, size=25, maxit=1000)
ann_3 <- nnet(gen_election ~ ., data=train, size=24, maxit=1000)
predicted_values_ANN3 <- predict(ann_3, test,type= "raw")
pred_ANN3 <- prediction(predicted_values_ANN3, test$gen_election)
perf <- performance(pred_ANN3, measure = "tpr", x.measure = "fpr")
auc <- performance(pred_ANN3, measure = "auc")
auc <- auc@y.values[[1]]
roc.data <- data.frame(fpr=unlist(perf@x.values),
tpr=unlist(perf@y.values),
model="ANN")
ggplot(roc.data, aes(x=fpr, ymin=0, ymax=tpr)) +
geom_ribbon(alpha=0.2) +
geom_line(aes(y=tpr)) +
ggtitle(paste0("ROC Curve w/ AUC=", auc))
im <- load.image(C:\Users\Ibragim\Desktop\homework/Capture1.png)
im <- load.image(C://Users/Ibragim/Desktop/homework/Capture1.png)
getwd
getwd()
im <- load.image("C:/Users/Ibragim/Desktop/homework/Capture1.png")
im <- load("C:/Users/Ibragim/Desktop/homework/Capture1.png")
install.packages("imager")
library(imager)
im <- load.image("C:/Users/Ibragim/Desktop/homework/Capture1.png")
plot(im)
library(imager)
load.image("C:/Users/Ibragim/Desktop/homework/Capture1.png")
library(imager)
im <- load.image("C:/Users/Ibragim/Desktop/homework/Capture1.png")
plot(im)
library(imager)
im <- load.image("C:/Users/Ibragim/Desktop/homework/Capture2.png")
plot(im)
#in case the obove plot is not clearly seen
library(imager)
im <- load.image("C:/Users/Ibragim/Desktop/homework/Capture3.png")
plot(im)
